<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">

    <title>Collapsible Tree Example</title>

    <style>

	.node circle {
	  fill: #fff;
	  stroke: steelblue;
	  stroke-width: 3px;
	}

	.node text { font: 12px sans-serif; }

	.link {
	  fill: none;
	  stroke: #ccc;
	  stroke-width: 2px;
	}
	
    </style>

  </head>

  <body>

<!-- load the d3.js library -->	
<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="http://code.jquery.com/jquery-1.10.2.min.js"></script>
<script>

// ************** Generate the tree diagram	 *****************
var margin = {top: 20, right: 120, bottom: 20, left: 120},
	width = 960 - margin.right - margin.left,
	height = 500 - margin.top - margin.bottom;

var maxLabelLength = 0;
var totalNodes = 0;
var viewerHeight = $(document).height();
var viewerWidth = $(document).width();
var i = 0;

function zoom() {
        svgGroup.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
    }


    // define the zoomListener which calls the zoom function on the "zoom" event constrained within the scaleExtents
var zoomListener = d3.behavior.zoom().scaleExtent([0.1, 3]).on("zoom", zoom);

var tree = d3.layout.tree()
	.size([viewerHeight, viewerWidth]);

var diagonal = d3.svg.diagonal()
	.projection(function(d) { return [d.y, d.x]; });

var svg = d3.select("body").append("svg")
	.attr("width", viewerWidth)
	.attr("height", viewerHeight)
  .append("g")
	.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

d3.select("body").call(zoomListener);
var svgGroup = svg;
var flag = false;
var root_x = 0;
// load the external data
d3.json("flare2.json", function(error, treeData) {
  root = treeData;
  update(root, diagonal, 1);
  flag = true;
});

var diagonal2 = d3.svg.diagonal()
	.projection(function(d) { return[-d.y, d.x]; });
	
d3.json("flare2.json", function(error, treeData) {
	root = treeData;
	update(root, diagonal2, -1);
	});
	
function update(source, diag, orient) {
	// Compute the new height, function counts total children of root node and sets tree height accordingly.
	// This prevents the layout looking squashed when new nodes are made visible or looking sparse when nodes are removed
	// This makes the layout more consistent.
	var levelWidth = [1];
	var childCount = function(level, n) {

		if (n.children && n.children.length > 0) {
			if (levelWidth.length <= level + 1) levelWidth.push(0);

			levelWidth[level + 1] += n.children.length;
			n.children.forEach(function(d) {
				childCount(level + 1, d);
			});
		}
	};
	childCount(0, source);
	var newHeight = d3.max(levelWidth) * 35; // 25 pixels per line  
	tree = tree.size([newHeight, viewerWidth]);

  // Compute the new tree layout.
  var nodes = tree.nodes(source).reverse(),
	  links = tree.links(nodes);

	if (flag == true) {
		tree.nodes(source)[0].x = root_x;
		console.log("moved root");
	}
	else {
		root_x = tree.nodes(source)[0].x;
		console.log("stored root");
	}

	// Call visit function to establish maxLabelLength
	visit(source, function(d) {
		totalNodes++;
		maxLabelLength = Math.max(d.name.length, maxLabelLength);

	}, function(d) {
		return d.children && d.children.length > 0 ? d.children : null;
	});
	
  // Normalize for fixed-depth.
  nodes.forEach(function(d) { 
	d.y = (d.depth * (maxLabelLength * 10)); //maxLabelLength * 10px
	//d.y = d.depth * 180; 
  });

  // Declare the nodes…
  var node = svg.selectAll("g.node")
	  .data(nodes, function(d) { return d.id || (d.id = ++i); });

  // Enter the nodes.
  var nodeEnter = node.enter().append("g")
	  .attr("class", "node")
	  .attr("transform", function(d) { 
		  return "translate(" + orient*d.y + "," + d.x + ")"; });

  nodeEnter.append("circle")
	  .attr("r", 10)
	  .style("fill", "#fff");

  nodeEnter.append("text")
	  .attr("x", function(d) { 
		  return d.children || d._children ? -13 : 13; })
	  .attr("dy", ".35em")
	  .attr("text-anchor", function(d) { 
		  return d.children || d._children ? "end" : "start"; })
	  .text(function(d) { return d.name; })
	  .style("fill-opacity", 1);

  // Declare the links…
  var link = svg.selectAll("path.link")
	  .data(links, function(d) { return d.target.id; });

  // Enter the links.
  link.enter().insert("path", "g")
	  .attr("class", "link")
	  .attr("d", diag);

}

//helper function to visit each node
function visit(parent, visitFn, childrenFn) {
	if (!parent) return;

	visitFn(parent);

	var children = childrenFn(parent);
	if (children) {
		var count = children.length;
		for (var i = 0; i < count; i++) {
			visit(children[i], visitFn, childrenFn);
		}
	}
}
</script>
	
  </body>
</html>